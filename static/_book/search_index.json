[["index.html", "Introduction to R Programming Chapter 1 Introduction 1.1 Learning Objectives 1.2 Why R and R Markdown? 1.3 Course Structure 1.4 Prerequisites 1.5 Course Materials 1.6 Practical Applications in Health Economics 1.7 Assessment 1.8 Getting Started 1.9 Support and Resources", " Introduction to R Programming IBRAHIM KASSOUM Habibou 2025-02-03 Chapter 1 Introduction Welcome to this introductory R programming course, specifically designed for Health Economics students to quickly give them a glimse of R. In today’s data-driven healthcare environment, the ability to analyze and visualize health economic data effectively is crucial. This 8 hours course will equip you with the essential skills to use R for data analysis, and visualization using R Markdown. 1.1 Learning Objectives By the end of this course, you will be able to: Master the fundamentals of R programming and RStudio environment Understand data wrangling techniques using tidyverse packages Create professional visualizations with ggplot2 Apply these skills to real-world health economics scenarios througth exercices 1.2 Why R and R Markdown? R has become an essential tool in health economics for several reasons: Open-source and Free: Access to powerful statistical and analytical tools without licensing costs Reproducibility: Your analyses can be easily shared and reproduced by others Extensive Package Ecosystem: Specialized packages for health economics and statistics Data Visualization: Professional-quality graphics and interactive visualizations Integration with Other Tools: Seamless integration with databases, other statistical software, and reporting tools 1.3 Course Structure Our course is organized into several modules: 1.3.1 R basics and data manipulations (2h) Introduction to R and RStudio Data types and objects Importing data and basic data manipulations Exercices 1.3.2 Data Wrangling and basic statistics (2h) Data cleaning (Filtering, selecting, and transforming data) and preparation Combining datasets Computing statistics (mean, variance) Exercices 1.3.3 Data Visualization with ggplot (2h) Principles of effective visualization Creating plots with ggplot2 Customizing graphics for healthcare data Exercices 1.4 Prerequisites No prior programming experience is required Basic statistical knowledge Laptop with R and RStudio installed 1.5 Course Materials All course materials will be provided at the end of the course in an R Markdown book format, allowing you to: Follow along with interactive examples Execute code in real-time Create your own annotations Test your leaning through exercices 1.6 Practical Applications in Health Economics Throughout the course, we’ll work with real-world examples relevant to health economics, such as: Covid 19 Blood storage using the medicaldata library. 1.7 Assessment Your learning will be evaluated through exercises during sessions. 1.8 Getting Started Before our first session, please: Install R from https://cran.r-project.org/ Install RStudio Desktop from https://posit.co/download/rstudio-desktop/ Test your installation by running basic R commands RStudio is a free software tool that makes working with the R programming language much easier. Think of it as a specialized workspace for R - like having a well-organized desk with all your tools in the right place. While you can use R by itself, RStudio gives you helpful features like: A cleaner way to write and run your code Better organization of your data Simple ways to manage R add-ons (called packages) Easy viewing of your results There’s also a paid professional version available from the company Posit, but the free version has everything most people need. If you’re planning to work with R, using RStudio is highly recommended since it’s specifically designed to make R programming more user-friendly. Harrer et al. (2023) 1.8.1 Understanding the RStudio Interface When you first open RStudio, you’ll encounter three main sections: Console :This is where the actual work happens in R. You can type R commands directly here and press Enter to execute them. Think of it as R’s command center. Environment: Shows all your current R objects (variables, data, functions) like a workspace overview where you can see everything you’ve created. Files/Plots/Packages/Help: a multi-purpose area that shows: your computer’s files and folders, graphs and visualizations you create, installed R packages, help documentation. Editor : opens when you create a new R script (File &gt; New File &gt; R Script). This is where you write and save your R code Files are saved with a .R extension. *To run code from the editor: Select the code you want to run; Click the “Run” button (▹) in the top-right of the editor Or use the shortcut Ctrl+Enter (Windows) / Cmd+Enter (Mac) Note: While you write code in the editor, it always executes in the console. Think of the editor as your notebook and the console as where the actual computation happens. 1.9 Support and Resources Office number: 404 Office hours: 8AM-8PM Email: habibou.ibrahim_kassoum@doctorant.uca.fr Online forum for questions and discussions (stackoverflow) Some online resources and reading materials: - Bookdown Evaluation of Randomized Controlled Trials With R Pierre Beaucoral’s classes Remember, learning to program is like learning a new language - it takes practice and patience. Don’t hesitate to ask questions and collaborate with your peers throughout this journey. Let’s begin this exciting journey into the world of R programming for health economics! References Harrer, Mathias, Pim Cuijpers, Lea Schuurmans, Tim Kaiser, Claudia Buntrock, Annemieke van Straten, and David Daniel Ebert. 2023. Evaluation of Randomized Controlled Trials: A Primer and Tutorial for Mental Health Researchers. Vol. 24. 562. Trials. https://doi.org/10.1186/s13063-023-07596-3. "],["r-basic-data-manipulations.html", "Chapter 2 R basic data manipulations 2.1 Introduction to R Syntax 2.2 Objects in R 2.3 Exercise 1 2.4 Importing an Manipulating data in R 2.5 Exercise 2", " Chapter 2 R basic data manipulations 2.1 Introduction to R Syntax R is a powerful programming language designed specifically for statistical computing and data analysis. Let’s explore its fundamental concepts. 2.1.1 Variables and Data Types Before diving into coding, it’s essential to understand the basic data types in R. Think of variables as containers that store different types of information. R has three main types of data that you’ll use frequently: # Numeric (integers and decimals) # Numbers can be whole (integers) or have decimal points my_number &lt;- 42.5 print(my_number) ## [1] 42.5 # Character (text strings) # Any text data must be enclosed in quotes my_text &lt;- &quot;Hello R Markdown!&quot; print(my_text) ## [1] &quot;Hello R Markdown!&quot; # Logical (boolean values) # TRUE/FALSE values are useful for conditional operations my_logical &lt;- TRUE print(my_logical) ## [1] TRUE The &lt;- symbol is the assignment operator in R. While you can use =, &lt;- is preferred in the R community. Let’s practice creating meaningful variables: # Create and assign variables age &lt;- 25 # Numeric name &lt;- &quot;Alice&quot; # Character is_student &lt;- TRUE # Logical # Display our variables print(age) ## [1] 25 print(name) ## [1] &quot;Alice&quot; print(is_student) ## [1] TRUE # Check variable types using class() # This is useful to confirm what type of data you&#39;re working with class(age) ## [1] &quot;numeric&quot; class(name) ## [1] &quot;character&quot; class(is_student) ## [1] &quot;logical&quot; 2.1.2 Basic Operations R can perform various arithmetic operations just like a calculator. These operations are fundamental to data analysis: addition, subtraction, multiplication, division # Basic arithmetic operations are straightforward addition &lt;- 10 + 5 # Adding numbers subtraction &lt;- 10 - 5 # Subtracting numbers multiplication &lt;- 10 * 5 # Multiplying numbers division &lt;- 10 / 5 # Dividing numbers # Display results print(addition) ## [1] 15 print(subtraction) ## [1] 5 print(multiplication) ## [1] 50 print(division) ## [1] 2 # More complex mathematical operations power &lt;- 2^3 # Exponentiation (2 to the power of 3) square_root &lt;- sqrt(16) # Square root function print(power) ## [1] 8 print(square_root) ## [1] 4 Logical operations are crucial for data filtering and conditional statements: # Comparison operators return TRUE or FALSE equals &lt;- 5 == 5 # Equality comparison greater_than &lt;- 10 &gt; 5 # Greater than comparison less_than &lt;- 3 &lt; 7 # Less than comparison # Logical operators combine TRUE/FALSE values and_operator &lt;- TRUE &amp; TRUE # Both conditions must be TRUE or_operator &lt;- TRUE | FALSE # At least one condition must be TRUE # Print results print(equals) ## [1] TRUE print(greater_than) ## [1] TRUE print(less_than) ## [1] TRUE print(and_operator) ## [1] TRUE print(or_operator) ## [1] TRUE 2.2 Objects in R (image from http://venus.ifca.unican.es/Rintro/dataStruct.html) 2.2.1 Working with Vectors Vectors are one of the most basic data structures in R. Think of them as a collection of elements of the same type, like a list of numbers or strings: # Creating vectors using the combine function c() numeric_vector &lt;- c(1, 2, 3, 4, 5) # Vector of numbers character_vector &lt;- c(&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;, &quot;avocado&quot;, &quot;mango&quot;) # Vector of strings logical_vector &lt;- c(TRUE, FALSE, TRUE) # Vector of logical values # Display vectors print(numeric_vector) ## [1] 1 2 3 4 5 print(character_vector) ## [1] &quot;apple&quot; &quot;banana&quot; &quot;cherry&quot; &quot;avocado&quot; &quot;mango&quot; print(logical_vector) ## [1] TRUE FALSE TRUE # Vector operations - R can perform operations on entire vectors at once # This is called vectorization and is very efficient print(length(numeric_vector)) # length of the vector ## [1] 5 doubled &lt;- numeric_vector * 2 # Multiply each element by 2 print(doubled) ## [1] 2 4 6 8 10 # Accessing elements using indexing # R uses 1-based indexing (first element is at position 1, not 0) first_element &lt;- numeric_vector[1] # Get first element selected_elements &lt;- numeric_vector[c(1, 3, 5)] # Get specific elements print(first_element) ## [1] 1 print(selected_elements) ## [1] 1 3 5 2.2.2 Creating Sequences R provides several convenient ways to create sequences of numbers, which is particularly useful for data analysis and plotting: # Using seq() for more control over sequence generation sequence1 &lt;- seq(1, 10) # Basic sequence from 1 to 10 sequence2 &lt;- seq(0, 20, by = 2) # Even numbers from 0 to 20 # Using : operator for simple sequences sequence3 &lt;- 1:10 # Another way to create sequence from 1 to 10 # Using rep() to repeat values repeated &lt;- rep(5, times = 3) # Repeat the number 5 three times print(sequence1) ## [1] 1 2 3 4 5 6 7 8 9 10 print(sequence2) ## [1] 0 2 4 6 8 10 12 14 16 18 20 print(sequence3) ## [1] 1 2 3 4 5 6 7 8 9 10 print(repeated) ## [1] 5 5 5 2.3 Exercise 1 Understanding Data Types Create three variables and assign them values of different data types: A numeric variable representing your height in centimeters. A character variable storing your favorite fruit. A logical variable indicating whether you like R programming. Then, print each variable and use class() to check its data type. Basic Arithmetic Operations Perform the following calculations and store the results in variables: Multiply 15 by 3. Subtract 7 from 100. Compute the square root of 64. Raise 3 to the power of 4. Print all results. Vector Manipulation Create a numeric vector containing the numbers 2, 4, 6, 8, 10. Multiply all elements of the vector by 3. Extract the second and fourth elements of the vector. Create a character vector with three country names of your choice. Multiply it by 3. Creating Sequences Create a sequence of numbers from 5 to 50 with a step size of 5. Generate a sequence of odd numbers from 1 to 15 using seq(). Use rep() to create a vector that repeats the number 7 five times. 2.3.1 Working with Data Frames Data frames are the most common way to work with structured data in R. They’re similar to Excel spreadsheets or database tables: # Create a simple data frame # Each column can have a different data type students_df &lt;- data.frame( name = c(&quot;Monelson&quot;, &quot;Noemie&quot;, &quot;Alphonse&quot;, &quot;Aichatou&quot;, &quot;Laurene&quot;, &quot;Anonkoua&quot;), # Character column age = c(25, 20, 23, 22, 22, 26), # Numeric column note = c(10, 15, 13, 15, 16.5, 9), # Numeric column is_graduate = c(FALSE, TRUE, TRUE, TRUE, T, F) # Logical column ) # Display the data frame print(students_df) ## name age note is_graduate ## 1 Monelson 25 10.0 FALSE ## 2 Noemie 20 15.0 TRUE ## 3 Alphonse 23 13.0 TRUE ## 4 Aichatou 22 15.0 TRUE ## 5 Laurene 22 16.5 TRUE ## 6 Anonkoua 26 9.0 FALSE # Basic data frame operations # Access a column using $ notation print(students_df$age) ## [1] 25 20 23 22 22 26 # Access a row using index print(students_df[5, ]) ## name age note is_graduate ## 5 Laurene 22 16.5 TRUE # Add a new column - must match the number of rows students_df$height &lt;- c(175, 168, 182, 150, 160, 155) print(students_df) ## name age note is_graduate height ## 1 Monelson 25 10.0 FALSE 175 ## 2 Noemie 20 15.0 TRUE 168 ## 3 Alphonse 23 13.0 TRUE 182 ## 4 Aichatou 22 15.0 TRUE 150 ## 5 Laurene 22 16.5 TRUE 160 ## 6 Anonkoua 26 9.0 FALSE 155 2.4 Importing an Manipulating data in R 2.4.1 Importing data # Installing and Loading the Required Package ## First, install and load the `medicaldata` package to access the `covid_testing` dataset. # Install the package (only needs to be done once) ## install.packages(&quot;medicaldata&quot;) # Load the package into the R session library(&quot;medicaldata&quot;) # Load the COVID-19 testing dataset from the medicaldata package covid &lt;- medicaldata::covid_testing # Display the first few rows of the dataset head(covid) ## subject_id fake_first_name fake_last_name gender pan_day test_id ## 1 1412 jhezane westerling female 4 covid ## 2 533 penny targaryen female 7 covid ## 3 9134 grunt rivers male 7 covid ## 4 8518 melisandre swyft female 8 covid ## 5 8967 rolley karstark male 8 covid ## 6 11048 megga karstark female 8 covid ## clinic_name result demo_group age drive_thru_ind ct_result orderset ## 1 inpatient ward a negative patient 0.0 0 45 0 ## 2 clinical lab negative patient 0.0 1 45 0 ## 3 clinical lab negative patient 0.8 1 45 1 ## 4 clinical lab negative patient 0.8 1 45 1 ## 5 emergency dept negative patient 0.8 0 45 1 ## 6 oncology day hosp negative patient 0.8 0 45 0 ## payor_group patient_class col_rec_tat rec_ver_tat ## 1 government inpatient 1.4 5.2 ## 2 commercial not applicable 2.3 5.8 ## 3 &lt;NA&gt; &lt;NA&gt; 7.3 4.7 ## 4 &lt;NA&gt; &lt;NA&gt; 5.8 5.0 ## 5 government emergency 1.2 6.4 ## 6 commercial recurring outpatient 1.4 7.0 # Show the column names of the dataset colnames(covid) ## [1] &quot;subject_id&quot; &quot;fake_first_name&quot; &quot;fake_last_name&quot; &quot;gender&quot; ## [5] &quot;pan_day&quot; &quot;test_id&quot; &quot;clinic_name&quot; &quot;result&quot; ## [9] &quot;demo_group&quot; &quot;age&quot; &quot;drive_thru_ind&quot; &quot;ct_result&quot; ## [13] &quot;orderset&quot; &quot;payor_group&quot; &quot;patient_class&quot; &quot;col_rec_tat&quot; ## [17] &quot;rec_ver_tat&quot; # Show the number of columns in the dataset ncol(covid) ## [1] 17 # Show the number of rows in the dataset nrow(covid) ## [1] 15524 2.4.2 Data Frame Manipulation Data frames support powerful operations for data analysis: # Filter data based on conditions high_gpa &lt;- students_df[students_df$gpa &gt; 3.5, ] # Select rows where GPA &gt; 3.5 print(high_gpa) ## [1] name age note is_graduate height ## &lt;0 lignes&gt; (ou &#39;row.names&#39; de longueur nulle) # Sort data using order() sorted_by_age &lt;- students_df[order(students_df$age), ] # Sort by age print(sorted_by_age) ## name age note is_graduate height ## 2 Noemie 20 15.0 TRUE 168 ## 4 Aichatou 22 15.0 TRUE 150 ## 5 Laurene 22 16.5 TRUE 160 ## 3 Alphonse 23 13.0 TRUE 182 ## 1 Monelson 25 10.0 FALSE 175 ## 6 Anonkoua 26 9.0 FALSE 155 # Or sort(students_df$age) ## [1] 20 22 22 23 25 26 2.5 Exercise 2 Import the “blood_storage” database from the package medicaldata. Log-transform the variable age in data and save the result as age.log. Square all values in PVol (Prostate  volume) and save the result as PVol.squared within the dataset. Check whether the AA (African American race) is of class factor (0 = “non‐African-American”; 1 = “African American”). Filter out the records for which (PreopPSA &gt;= 10) and (Recurrence == 0). In the fifth and sixth rows of the data, change the value of Age to NA (missing). Remove the variables from the dataset: AA,FamHx,OrganConfined. Remember that R is case-sensitive and very particular about syntax. Pay attention to brackets, commas, and quotation marks. The best way to learn is by experimenting with the code and modifying it to see what happens! "],["data-wrangling-and-basic-statistics.html", "Chapter 3 Data Wrangling and basic statistics 3.1 1. Introduction to dplyr 3.2 Filtering, Selecting, and Arranging Data 3.3 Adding and Modifying Columns 3.4 Summarizing Data 3.5 Joining Data Frames 3.6 Exercises 3", " Chapter 3 Data Wrangling and basic statistics 3.1 1. Introduction to dplyr The dplyr package is a powerful tool in R for data manipulation. It provides functions for filtering, selecting, arranging, summarizing, and mutating data in an easy and readable way. The %&gt;% (pipe operator) is commonly used to link functions together. # Install and load necessary packages #install.packages(&quot;dplyr&quot;) #install.packages(&quot;medicaldata&quot;) library(dplyr) ## ## Attachement du package : &#39;dplyr&#39; ## Les objets suivants sont masqués depuis &#39;package:stats&#39;: ## ## filter, lag ## Les objets suivants sont masqués depuis &#39;package:base&#39;: ## ## intersect, setdiff, setequal, union library(medicaldata) # Print all the function in the package dplyr ls(&quot;package:dplyr&quot;) ## [1] &quot;%&gt;%&quot; &quot;across&quot; &quot;add_count&quot; ## [4] &quot;add_count_&quot; &quot;add_row&quot; &quot;add_rownames&quot; ## [7] &quot;add_tally&quot; &quot;add_tally_&quot; &quot;all_equal&quot; ## [10] &quot;all_of&quot; &quot;all_vars&quot; &quot;anti_join&quot; ## [13] &quot;any_of&quot; &quot;any_vars&quot; &quot;arrange&quot; ## [16] &quot;arrange_&quot; &quot;arrange_all&quot; &quot;arrange_at&quot; ## [19] &quot;arrange_if&quot; &quot;as.tbl&quot; &quot;as_data_frame&quot; ## [22] &quot;as_label&quot; &quot;as_tibble&quot; &quot;auto_copy&quot; ## [25] &quot;band_instruments&quot; &quot;band_instruments2&quot; &quot;band_members&quot; ## [28] &quot;bench_tbls&quot; &quot;between&quot; &quot;bind_cols&quot; ## [31] &quot;bind_rows&quot; &quot;c_across&quot; &quot;case_match&quot; ## [34] &quot;case_when&quot; &quot;changes&quot; &quot;check_dbplyr&quot; ## [37] &quot;coalesce&quot; &quot;collapse&quot; &quot;collect&quot; ## [40] &quot;combine&quot; &quot;common_by&quot; &quot;compare_tbls&quot; ## [43] &quot;compare_tbls2&quot; &quot;compute&quot; &quot;consecutive_id&quot; ## [46] &quot;contains&quot; &quot;copy_to&quot; &quot;count&quot; ## [49] &quot;count_&quot; &quot;cross_join&quot; &quot;cumall&quot; ## [52] &quot;cumany&quot; &quot;cume_dist&quot; &quot;cummean&quot; ## [55] &quot;cur_column&quot; &quot;cur_data&quot; &quot;cur_data_all&quot; ## [58] &quot;cur_group&quot; &quot;cur_group_id&quot; &quot;cur_group_rows&quot; ## [61] &quot;current_vars&quot; &quot;data_frame&quot; &quot;db_analyze&quot; ## [64] &quot;db_begin&quot; &quot;db_commit&quot; &quot;db_create_index&quot; ## [67] &quot;db_create_indexes&quot; &quot;db_create_table&quot; &quot;db_data_type&quot; ## [70] &quot;db_desc&quot; &quot;db_drop_table&quot; &quot;db_explain&quot; ## [73] &quot;db_has_table&quot; &quot;db_insert_into&quot; &quot;db_list_tables&quot; ## [76] &quot;db_query_fields&quot; &quot;db_query_rows&quot; &quot;db_rollback&quot; ## [79] &quot;db_save_query&quot; &quot;db_write_table&quot; &quot;dense_rank&quot; ## [82] &quot;desc&quot; &quot;dim_desc&quot; &quot;distinct&quot; ## [85] &quot;distinct_&quot; &quot;distinct_all&quot; &quot;distinct_at&quot; ## [88] &quot;distinct_if&quot; &quot;distinct_prepare&quot; &quot;do&quot; ## [91] &quot;do_&quot; &quot;dplyr_col_modify&quot; &quot;dplyr_reconstruct&quot; ## [94] &quot;dplyr_row_slice&quot; &quot;ends_with&quot; &quot;enexpr&quot; ## [97] &quot;enexprs&quot; &quot;enquo&quot; &quot;enquos&quot; ## [100] &quot;ensym&quot; &quot;ensyms&quot; &quot;eval_tbls&quot; ## [103] &quot;eval_tbls2&quot; &quot;everything&quot; &quot;explain&quot; ## [106] &quot;expr&quot; &quot;failwith&quot; &quot;filter&quot; ## [109] &quot;filter_&quot; &quot;filter_all&quot; &quot;filter_at&quot; ## [112] &quot;filter_if&quot; &quot;first&quot; &quot;full_join&quot; ## [115] &quot;funs&quot; &quot;funs_&quot; &quot;glimpse&quot; ## [118] &quot;group_by&quot; &quot;group_by_&quot; &quot;group_by_all&quot; ## [121] &quot;group_by_at&quot; &quot;group_by_drop_default&quot; &quot;group_by_if&quot; ## [124] &quot;group_by_prepare&quot; &quot;group_cols&quot; &quot;group_data&quot; ## [127] &quot;group_indices&quot; &quot;group_indices_&quot; &quot;group_keys&quot; ## [130] &quot;group_map&quot; &quot;group_modify&quot; &quot;group_nest&quot; ## [133] &quot;group_rows&quot; &quot;group_size&quot; &quot;group_split&quot; ## [136] &quot;group_trim&quot; &quot;group_vars&quot; &quot;group_walk&quot; ## [139] &quot;grouped_df&quot; &quot;groups&quot; &quot;id&quot; ## [142] &quot;ident&quot; &quot;if_all&quot; &quot;if_any&quot; ## [145] &quot;if_else&quot; &quot;inner_join&quot; &quot;intersect&quot; ## [148] &quot;is.grouped_df&quot; &quot;is.src&quot; &quot;is.tbl&quot; ## [151] &quot;is_grouped_df&quot; &quot;join_by&quot; &quot;lag&quot; ## [154] &quot;last&quot; &quot;last_col&quot; &quot;last_dplyr_warnings&quot; ## [157] &quot;lead&quot; &quot;left_join&quot; &quot;location&quot; ## [160] &quot;lst&quot; &quot;make_tbl&quot; &quot;matches&quot; ## [163] &quot;min_rank&quot; &quot;mutate&quot; &quot;mutate_&quot; ## [166] &quot;mutate_all&quot; &quot;mutate_at&quot; &quot;mutate_each&quot; ## [169] &quot;mutate_each_&quot; &quot;mutate_if&quot; &quot;n&quot; ## [172] &quot;n_distinct&quot; &quot;n_groups&quot; &quot;na_if&quot; ## [175] &quot;near&quot; &quot;nest_by&quot; &quot;nest_join&quot; ## [178] &quot;new_grouped_df&quot; &quot;new_rowwise_df&quot; &quot;nth&quot; ## [181] &quot;ntile&quot; &quot;num_range&quot; &quot;one_of&quot; ## [184] &quot;order_by&quot; &quot;percent_rank&quot; &quot;pick&quot; ## [187] &quot;progress_estimated&quot; &quot;pull&quot; &quot;quo&quot; ## [190] &quot;quo_name&quot; &quot;quos&quot; &quot;recode&quot; ## [193] &quot;recode_factor&quot; &quot;reframe&quot; &quot;relocate&quot; ## [196] &quot;rename&quot; &quot;rename_&quot; &quot;rename_all&quot; ## [199] &quot;rename_at&quot; &quot;rename_if&quot; &quot;rename_vars&quot; ## [202] &quot;rename_vars_&quot; &quot;rename_with&quot; &quot;right_join&quot; ## [205] &quot;row_number&quot; &quot;rows_append&quot; &quot;rows_delete&quot; ## [208] &quot;rows_insert&quot; &quot;rows_patch&quot; &quot;rows_update&quot; ## [211] &quot;rows_upsert&quot; &quot;rowwise&quot; &quot;same_src&quot; ## [214] &quot;sample_frac&quot; &quot;sample_n&quot; &quot;select&quot; ## [217] &quot;select_&quot; &quot;select_all&quot; &quot;select_at&quot; ## [220] &quot;select_if&quot; &quot;select_var&quot; &quot;select_vars&quot; ## [223] &quot;select_vars_&quot; &quot;semi_join&quot; &quot;setdiff&quot; ## [226] &quot;setequal&quot; &quot;show_query&quot; &quot;slice&quot; ## [229] &quot;slice_&quot; &quot;slice_head&quot; &quot;slice_max&quot; ## [232] &quot;slice_min&quot; &quot;slice_sample&quot; &quot;slice_tail&quot; ## [235] &quot;sql&quot; &quot;sql_escape_ident&quot; &quot;sql_escape_string&quot; ## [238] &quot;sql_join&quot; &quot;sql_select&quot; &quot;sql_semi_join&quot; ## [241] &quot;sql_set_op&quot; &quot;sql_subquery&quot; &quot;sql_translate_env&quot; ## [244] &quot;src&quot; &quot;src_df&quot; &quot;src_local&quot; ## [247] &quot;src_mysql&quot; &quot;src_postgres&quot; &quot;src_sqlite&quot; ## [250] &quot;src_tbls&quot; &quot;starts_with&quot; &quot;starwars&quot; ## [253] &quot;storms&quot; &quot;summarise&quot; &quot;summarise_&quot; ## [256] &quot;summarise_all&quot; &quot;summarise_at&quot; &quot;summarise_each&quot; ## [259] &quot;summarise_each_&quot; &quot;summarise_if&quot; &quot;summarize&quot; ## [262] &quot;summarize_&quot; &quot;summarize_all&quot; &quot;summarize_at&quot; ## [265] &quot;summarize_each&quot; &quot;summarize_each_&quot; &quot;summarize_if&quot; ## [268] &quot;sym&quot; &quot;symdiff&quot; &quot;syms&quot; ## [271] &quot;tally&quot; &quot;tally_&quot; &quot;tbl&quot; ## [274] &quot;tbl_df&quot; &quot;tbl_nongroup_vars&quot; &quot;tbl_ptype&quot; ## [277] &quot;tbl_vars&quot; &quot;tibble&quot; &quot;top_frac&quot; ## [280] &quot;top_n&quot; &quot;transmute&quot; &quot;transmute_&quot; ## [283] &quot;transmute_all&quot; &quot;transmute_at&quot; &quot;transmute_if&quot; ## [286] &quot;tribble&quot; &quot;type_sum&quot; &quot;ungroup&quot; ## [289] &quot;union&quot; &quot;union_all&quot; &quot;validate_grouped_df&quot; ## [292] &quot;validate_rowwise_df&quot; &quot;vars&quot; &quot;where&quot; ## [295] &quot;with_groups&quot; &quot;with_order&quot; &quot;wrap_dbplyr_obj&quot; # Load the COVID-19 dataset covid &lt;- medicaldata::covid_testing 3.2 Filtering, Selecting, and Arranging Data 3.2.1 Filtering Data 3.2.1.1 Filtering with Multiple Conditions We can filter the dataset to focus on specific conditions. For example, let’s filter cases where patients tested positive for COVID-19 (result == “positive”). positive_cases &lt;- covid %&gt;% filter(result == &quot;positive&quot;) # Show the first few rows of the filtered data head(positive_cases) ## # A tibble: 6 × 17 ## subject_id fake_first_name fake_last_name gender pan_day test_id clinic_name ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 2114 azzak tully male 10 covid inpatient wa… ## 2 7240 arryk mormont male 11 covid clinical lab ## 3 11391 zei umber female 11 covid s care ntwk ## 4 902 owen seaworth male 12 covid emergency de… ## 5 2573 glendon lannister male 12 covid emergency de… ## 6 5771 janna lannister female 12 covid hem onc day … ## # ℹ 10 more variables: result &lt;chr&gt;, demo_group &lt;chr&gt;, age &lt;dbl&gt;, ## # drive_thru_ind &lt;dbl&gt;, ct_result &lt;dbl&gt;, orderset &lt;dbl&gt;, payor_group &lt;chr&gt;, ## # patient_class &lt;chr&gt;, col_rec_tat &lt;dbl&gt;, rec_ver_tat &lt;dbl&gt; 3.2.1.2 Filtering with multiple conditions We can filter patients who are female (gender == “female”) and tested positive for COVID-19. female_positive &lt;- covid %&gt;% filter(gender == &quot;female&quot;, result == &quot;positive&quot;) # Show the first few rows of the filtered data head(female_positive) ## # A tibble: 6 × 17 ## subject_id fake_first_name fake_last_name gender pan_day test_id clinic_name ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 11391 zei umber female 11 covid s care ntwk ## 2 5771 janna lannister female 12 covid hem onc day … ## 3 11381 sansa martell female 13 covid clinical lab ## 4 864 meera westerling female 14 covid clinical lab ## 5 5023 chataya mormont female 15 covid emergency de… ## 6 6493 sybelle karstark female 16 covid emergency de… ## # ℹ 10 more variables: result &lt;chr&gt;, demo_group &lt;chr&gt;, age &lt;dbl&gt;, ## # drive_thru_ind &lt;dbl&gt;, ct_result &lt;dbl&gt;, orderset &lt;dbl&gt;, payor_group &lt;chr&gt;, ## # patient_class &lt;chr&gt;, col_rec_tat &lt;dbl&gt;, rec_ver_tat &lt;dbl&gt; 3.2.2 Selecting Specific Columns If we only need a few columns, we can use select() to keep only the relevant ones. selected_data &lt;- covid %&gt;% select(subject_id, age, gender, result) # Display the selected columns head(selected_data) ## # A tibble: 6 × 4 ## subject_id age gender result ## &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 1412 0 female negative ## 2 533 0 female negative ## 3 9134 0.8 male negative ## 4 8518 0.8 female negative ## 5 8967 0.8 male negative ## 6 11048 0.8 female negative We can use helper functions to select columns dynamically. selected_columns &lt;- covid %&gt;% select(starts_with(&quot;fake&quot;), contains(&quot;result&quot;)) # Display the selected columns head(selected_columns) ## # A tibble: 6 × 4 ## fake_first_name fake_last_name result ct_result ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 jhezane westerling negative 45 ## 2 penny targaryen negative 45 ## 3 grunt rivers negative 45 ## 4 melisandre swyft negative 45 ## 5 rolley karstark negative 45 ## 6 megga karstark negative 45 3.2.3 Modifying Values and Missing You can change a value in a column or even replace values with NA. For example, we set the “fake_name_last” to NA for the 5th row. # First covid[5, &quot;fake_first_name&quot;] &lt;- &quot;SAWADOGO&quot; covid[5, &quot;fake_last_name&quot;] &lt;- &quot;Laurent Benjamin&quot; covid[5, &quot;age&quot;] &lt;- 26 covid[5, &quot;result&quot;] &lt;- &quot;positive&quot; covid[6, &quot;fake_first_name&quot;] &lt;- &quot;OUATTARA Siguissongui&quot; covid[6, &quot;fake_last_name&quot;] &lt;- &quot;Sarah&quot; covid[6, &quot;age&quot;] &lt;- NA covid[6, &quot;result&quot;] &lt;- &quot;positive&quot; # Display the selected columns head(covid, 7) ## # A tibble: 7 × 17 ## subject_id fake_first_name fake_last_name gender pan_day test_id clinic_name ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 1412 jhezane westerling female 4 covid inpatient … ## 2 533 penny targaryen female 7 covid clinical l… ## 3 9134 grunt rivers male 7 covid clinical l… ## 4 8518 melisandre swyft female 8 covid clinical l… ## 5 8967 SAWADOGO Laurent Benja… male 8 covid emergency … ## 6 11048 OUATTARA Siguiss… Sarah female 8 covid oncology d… ## 7 663 ithoke targaryen male 9 covid clinical l… ## # ℹ 10 more variables: result &lt;chr&gt;, demo_group &lt;chr&gt;, age &lt;dbl&gt;, ## # drive_thru_ind &lt;dbl&gt;, ct_result &lt;dbl&gt;, orderset &lt;dbl&gt;, payor_group &lt;chr&gt;, ## # patient_class &lt;chr&gt;, col_rec_tat &lt;dbl&gt;, rec_ver_tat &lt;dbl&gt; 3.2.4 Arranging Data We can arrange the dataset in descending order of age. sorted_data &lt;- covid %&gt;% arrange(desc(age)) # Display the sorted columns head(sorted_data) ## # A tibble: 6 × 17 ## subject_id fake_first_name fake_last_name gender pan_day test_id clinic_name ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 3049 sansa westerling female 105 covid line clinica… ## 2 4078 walda harlaw female 48 covid emergency de… ## 3 12293 andrey tyrell male 87 covid emergency de… ## 4 11177 harra baratheon female 100 covid line clinica… ## 5 337 maerie baratheon female 105 covid emergency de… ## 6 8426 missandei tarly female 94 covid line clinica… ## # ℹ 10 more variables: result &lt;chr&gt;, demo_group &lt;chr&gt;, age &lt;dbl&gt;, ## # drive_thru_ind &lt;dbl&gt;, ct_result &lt;dbl&gt;, orderset &lt;dbl&gt;, payor_group &lt;chr&gt;, ## # patient_class &lt;chr&gt;, col_rec_tat &lt;dbl&gt;, rec_ver_tat &lt;dbl&gt; 3.3 Adding and Modifying Columns 3.3.1 Creating a New Column We can use mutate() to add new variables. Here, we create a new column to classify patients as “Young” (under 50) or “Elderly” (50 and above). covid &lt;- covid %&gt;% mutate(age_group = case_when( age &lt;= 5 ~ &quot;Underfive&quot;, age &gt; 5 &amp; age &lt;= 10 ~ &quot;Children&quot;, age &gt; 10 &amp; age &lt;= 15 ~ &quot;Teenagers&quot;, age &gt; 15 &amp; age &lt;= 30 ~ &quot;Young Adults&quot;, age &gt; 30 &amp; age &lt;= 60 ~ &quot;Adults&quot;, age &gt; 60 ~ &quot;Elderly&quot; )) # Display results head(covid %&gt;% select(age, age_group), 10) ## # A tibble: 10 × 2 ## age age_group ## &lt;dbl&gt; &lt;chr&gt; ## 1 0 Underfive ## 2 0 Underfive ## 3 0.8 Underfive ## 4 0.8 Underfive ## 5 26 Young Adults ## 6 NA &lt;NA&gt; ## 7 0.8 Underfive ## 8 0 Underfive ## 9 0 Underfive ## 10 0.9 Underfive 3.3.2 Transforming a Column We can apply transformations to existing columns. For example, we log-transform the age variable. covid &lt;- covid %&gt;% mutate(age_log = log(age), age_squarred = age^2, age_square_root = sqrt(age)) # Display results head(covid %&gt;% select(age_log, age_squarred, age_square_root), 10) ## # A tibble: 10 × 3 ## age_log age_squarred age_square_root ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 -Inf 0 0 ## 2 -Inf 0 0 ## 3 -0.223 0.64 0.894 ## 4 -0.223 0.64 0.894 ## 5 3.26 676 5.10 ## 6 NA NA NA ## 7 -0.223 0.64 0.894 ## 8 -Inf 0 0 ## 9 -Inf 0 0 ## 10 -0.105 0.81 0.949 3.4 Summarizing Data 3.4.1 Simple summarizing We can use summarise() to calculate statistics. Here, we find the average and standard deviation of patients’ ages. age_stats &lt;- covid %&gt;% summarise(mean_age = mean(age), median_age = median(age), sd_age = sd(age), min_age = min(age), max_age = max(age)) age_stats_without_na &lt;- covid %&gt;% summarise(mean_age = mean(age, na.rm=TRUE), median_age = median(age, na.rm=TRUE), sd_age = sd(age, na.rm=TRUE), min_age = min(age, na.rm=TRUE), max_age = max(age, na.rm=TRUE)) # Display results age_stats ## # A tibble: 1 × 5 ## mean_age median_age sd_age min_age max_age ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 NA NA NA NA NA age_stats_without_na ## # A tibble: 1 × 5 ## mean_age median_age sd_age min_age max_age ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 14.2 9 16.5 0 138 3.4.2 Grouping and Summarizing Grouping allows us to calculate statistics for specific subgroups. Let’s calculate the average age for each test result category. age_by_result &lt;- covid %&gt;% group_by(result) %&gt;% summarise(n=n(), mean_age = mean(age, na.rm = TRUE), sd_age = sd(age, na.rm = TRUE))%&gt;% mutate(freq = n / sum(n), freq_in_percent = freq * 100) # Display results age_by_result ## # A tibble: 3 × 6 ## result n mean_age sd_age freq freq_in_percent ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 invalid 301 14.9 15.9 0.0194 1.94 ## 2 negative 14356 13.9 16.2 0.925 92.5 ## 3 positive 867 19.2 19.4 0.0558 5.58 3.5 Joining Data Frames Sometimes, we need to combine data from different sources. Here’s how to join two datasets. Join # Example datasets data_grade &lt;- data.frame( subject_id = seq(1:nrow(covid)), # subject id note = sample(1:20, nrow(covid), replace=TRUE) # Numeric ) data_grade &lt;- data_grade %&gt;% mutate(is_graduate = ifelse(note&gt;=10, TRUE, FALSE)) # Inner Join: Only matching subject_id rows join_data &lt;- full_join(covid, data_grade, by = &quot;subject_id&quot;) # Shown results head(join_data) ## # A tibble: 6 × 23 ## subject_id fake_first_name fake_last_name gender pan_day test_id clinic_name ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 1412 jhezane westerling female 4 covid inpatient … ## 2 533 penny targaryen female 7 covid clinical l… ## 3 9134 grunt rivers male 7 covid clinical l… ## 4 8518 melisandre swyft female 8 covid clinical l… ## 5 8967 SAWADOGO Laurent Benja… male 8 covid emergency … ## 6 11048 OUATTARA Siguiss… Sarah female 8 covid oncology d… ## # ℹ 16 more variables: result &lt;chr&gt;, demo_group &lt;chr&gt;, age &lt;dbl&gt;, ## # drive_thru_ind &lt;dbl&gt;, ct_result &lt;dbl&gt;, orderset &lt;dbl&gt;, payor_group &lt;chr&gt;, ## # patient_class &lt;chr&gt;, col_rec_tat &lt;dbl&gt;, rec_ver_tat &lt;dbl&gt;, age_group &lt;chr&gt;, ## # age_log &lt;dbl&gt;, age_squarred &lt;dbl&gt;, age_square_root &lt;dbl&gt;, note &lt;int&gt;, ## # is_graduate &lt;lgl&gt; 3.6 Exercises 3 Try these exercises to practice dplyr functions: Import the “blood_storage” database from the package medicaldata. Log-transform the variable age in data and save the result as age.login the dataframe. Arranging the dataframe using the age column. Create a new variable called PVol.squared with values equal to the square all values in PVol (Prostate volume).   Create a new variable called PVol.squared_root with values equal to the square root all values in PVol (Prostate  volume).   Compute the proportion of African American using the column AA (0 = “non‐African-American”; 1 = “African American”). Compute the proportion of African American by Tumor volume (using the variable TVol) and the mean and variance of the column age. Filter out the records for which (PreopPSA &gt;= 10) and (Recurrence == 0) using the filter function. Create a new column called subject_id and merge the “covid” database with the “blood_storage” using the newly created column. This lesson introduces essential dplyr functions for data manipulation in R. Try the exercises and explore the dataset further!  "],["data-visualization-with-ggplot.html", "Chapter 4 Data Visualization with ggplot 4.1 Overview 4.2 Basic Concepts 4.3 Scatter Plot 4.4 Exercise 1: Customizing Your First Plot 4.5 Bar Plots and Histograms 4.6 Exercise 3: Creating Histograms and Bar Plots", " Chapter 4 Data Visualization with ggplot 4.1 Overview The ggplot2 package is one of the most powerful and flexible tools for creating complex, multi-layered graphics in R. It implements the Grammar of Graphics, a framework that breaks down plots into semantic components such as layers, scales, and themes. 4.2 Basic Concepts Aesthetic Mappings (aes()): Defines how data variables are mapped to visual properties like color, size, and shape. Geometries (geom_*): Defines the type of plot, such as points (geom_point), lines (geom_line), and bars (geom_bar). Layers: Multiple geometries can be added to a plot. Scales and Coordinate Systems: Allows control over appearance. Themes: Adjust non-data elements like background and grid lines. 4.3 Scatter Plot 4.3.1 Basic Scatter Plot # Load libraries library(dplyr) library(ggplot2) library(readr) # Load the COVID-19 dataset covid_data &lt;- read_csv(&quot;country_wise_latest.csv&quot;) ## Rows: 187 Columns: 15 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: &quot;,&quot; ## chr (2): Country/Region, WHO Region ## dbl (13): Confirmed, Deaths, Recovered, Active, New cases, New deaths, New r... ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #View(covid_data) # Create the scatter plot ggplot(covid_data, # The data frame containing the COVID-19 data aes(x = `Recovered / 100 Cases`, # Variable for the x-axis (Recovered cases per 100) y = `Deaths / 100 Cases`)) + # Variable for the y-axis (Deaths per 100 cases) geom_point(color = &#39;navy&#39;) + # Add points to the plot, colored navy labs(title = &quot;Recovered vs. Deaths of Covid19&quot;, # Set the plot title x = &quot;Recovered (per 100 cases)&quot;, # Set the x-axis label y = &quot;Deaths (per 100 cases)&quot;) + # Set the y-axis label theme_minimal() # Use a minimal theme for a cleaner look 4.3.2 Scatter Plots and Line Plots # Create the scatter plot with a smooth line ggplot(covid_data, # The data frame containing the COVID-19 data aes(x = `Recovered / 100 Cases`, # Variable for the x-axis (Recovered cases per 100) y = `Deaths / 100 Cases`)) + # Variable for the y-axis (Deaths per 100 cases) geom_point(color = &#39;navy&#39;) + # Add points to the plot, colored navy geom_smooth(method = &quot;lm&quot;, # Add a smooth line, using a linear model (&quot;lm&quot;) color = &quot;black&quot;, # Set the line color to black se = TRUE) + # Display the standard error around the line labs(title = &quot;Recovered vs. Deaths of Covid19&quot;, # Set the plot title x = &quot;Recovered (per 100 cases)&quot;, # Set the x-axis label y = &quot;Deaths (per 100 cases)&quot;) + # Set the y-axis label theme_minimal() # Use a minimal theme for a cleaner look ## `geom_smooth()` using formula = &#39;y ~ x&#39; 4.4 Exercise 1: Customizing Your First Plot Objective: Create a scatter plot showing the relationship between proportion_of_active and proportion_of_recovery. Customize the plot: - Create a new variable (using the function mutateof the package dplyr) named proportion_of_active = Active/Confirmed. - Create a new variable (using the function mutateof the package dplyr) named proportion_of_recovery = Recovered/Confirmed. - Change the color of the points to “darkturquoise” (see list of color names) - Adjust the size of the points to 3. - Use triangles for the point shapes. - Add the regression line with the confidence interval estimate. 4.5 Bar Plots and Histograms 4.5.1 Histogram: # Create the histogram ggplot(covid_data, # The data frame containing the COVID-19 data aes(x = `New deaths`)) + # Variable for the x-axis (New deaths) geom_histogram(fill = &quot;skyblue&quot;, # Fill the bars with skyblue color = &quot;black&quot;) + # Set the bar outline color to black labs(title = &quot;Number of deaths of COVID-19&quot;, # Set the plot title x = &quot;Number of deaths&quot;, # Set the x-axis label y = &quot;Frequency&quot;) + # Set the y-axis label theme_minimal() # Use a minimal theme for a cleaner look ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. 4.5.2 Bar Plot # Calculate mean recovery rates by region and create bar plot covid_data %&gt;% # Start with the COVID-19 data group_by(`WHO Region`) %&gt;% # Group the data by WHO Region summarise(mean_recovery = mean(`Recovered / 100 Cases`, na.rm = TRUE)) %&gt;% # Calculate the mean recovery rate for each region, removing NA values ggplot(aes(y = mean_recovery, # Set the y-axis to the mean recovery rate x = `WHO Region`, # Set the x-axis to the WHO Region fill = `WHO Region`)) + # Fill the bars with different colors based on the region geom_bar(stat = &quot;identity&quot;, # Use &quot;identity&quot; because we&#39;ve already calculated the means color = &quot;black&quot;) + # Set the bar outline color to black labs(title = &quot;Mean recovered by region&quot;, # Set the plot title x = &quot;WHO Region&quot;, # Set the x-axis label y = &quot;Mean Recovered (per 100 cases)&quot;) + # Set the y-axis label theme_minimal() + # Use a minimal theme for a cleaner look theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Rotate x-axis labels for better readability library(medicaldata) # For the covid_testing dataset # Load the covid_testing dataset testing_data &lt;- medicaldata::covid_testing # Analyze test results by gender and create bar plot testing_data %&gt;% group_by(gender, result) %&gt;% # Group the data by gender and test result summarise(age_moyen = mean(age, na.rm=TRUE)) %&gt;% # Count the number of individuals in each group ungroup() %&gt;% # Ungroup the data for plotting ggplot(aes(y = age_moyen, # Set the y-axis to the mean age x = result, # Set the x-axis to the test result fill = gender)) + # Fill the bars with different colors based on gender geom_bar(stat = &quot;identity&quot;, # Use &quot;identity&quot; because we&#39;ve already calculated the counts color = &quot;black&quot;, # Set the bar outline color to black position = &quot;dodge&quot;) + # Place bars for different genders side-by-side labs(title = &quot;COVID-19 Test Results by Gender&quot;, # Set the plot title x = &quot;Result of the COVID-19 test&quot;, # Set the x-axis label y = &quot;Number of Individuals&quot;, # Set the y-axis label fill = &quot;Gender&quot;) + # Set the legend title theme_minimal() + # Use a minimal theme for a cleaner look theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Rotate x-axis labels for better readability ## `summarise()` has grouped output by &#39;gender&#39;. You can override using the ## `.groups` argument. 4.6 Exercise 3: Creating Histograms and Bar Plots Import the blood_storage database from the package. Log-transform the variable age in the data and save the result as age.log in the dataframe. Compare the histograms of the age and age.log variables and comment on the distribution. Create a bar plot of the mean PVol by aggregating by race (use the AA variable). Create a bar plot of the mean PVol by aggregating by the volume of the tumor (use the **TVol} variable). "],["references.html", "References", " References Harrer, Mathias, Pim Cuijpers, Lea Schuurmans, Tim Kaiser, Claudia Buntrock, Annemieke van Straten, and David Daniel Ebert. 2023. Evaluation of Randomized Controlled Trials: A Primer and Tutorial for Mental Health Researchers. Vol. 24. 562. Trials. https://doi.org/10.1186/s13063-023-07596-3. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
